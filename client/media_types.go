// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Simple-SNS": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/eniehack/simple-sns-go/design
// --out=D:\project\simple-sns-go
// --version=v1.3.1

package client

import (
	"github.com/goadesign/goa"
	"net/http"
	"time"
	"unicode/utf8"
)

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// 投稿の詳細な情報を返す際のレスポンス (default view)
//
// Identifier: application/vnd.post+json; view=default
type Post struct {
	// 投稿内容
	Body string `form:"body" json:"body" yaml:"body" xml:"body"`
	// 投稿日時
	PostedAt time.Time `form:"posted_at" json:"posted_at" yaml:"posted_at" xml:"posted_at"`
	// 投稿者のスクリーンネーム
	ScreenName string `form:"screen_name" json:"screen_name" yaml:"screen_name" xml:"screen_name"`
	// 投稿者
	UserID string `form:"user_id" json:"user_id" yaml:"user_id" xml:"user_id"`
}

// Validate validates the Post media type instance.
func (mt *Post) Validate() (err error) {

	if mt.UserID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "user_id"))
	}
	if mt.ScreenName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "screen_name"))
	}
	if mt.Body == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "body"))
	}
	if utf8.RuneCountInString(mt.ScreenName) > 20 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.screen_name`, mt.ScreenName, utf8.RuneCountInString(mt.ScreenName), 20, false))
	}
	if utf8.RuneCountInString(mt.UserID) > 15 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.user_id`, mt.UserID, utf8.RuneCountInString(mt.UserID), 15, false))
	}
	return
}

// DecodePost decodes the Post instance encoded in resp body.
func (c *Client) DecodePost(resp *http.Response) (*Post, error) {
	var decoded Post
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
