// Code generated by goa v3.0.2, DO NOT EDIT.
//
// Post HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/eniehack/persona-server/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	post "github.com/eniehack/persona-server/gen/post"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "Post" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreatePostPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Post", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the Post create
// server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*post.NewPostPayload)
		if !ok {
			return goahttp.ErrInvalidType("Post", "create", "*post.NewPostPayload", v)
		}
		req.Header.Set("Authorization", p.Token)
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Post", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the Post
// create endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Post", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildReferenceRequest instantiates a HTTP request object with method and
// path set to call the "Post" service "reference" endpoint
func (c *Client) BuildReferenceRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		postID string
	)
	{
		p, ok := v.(*post.Post)
		if !ok {
			return nil, goahttp.ErrInvalidType("Post", "reference", "*post.Post", v)
		}
		postID = p.PostID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ReferencePostPath(postID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Post", "reference", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeReferenceRequest returns an encoder for requests sent to the Post
// reference server.
func EncodeReferenceRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*post.Post)
		if !ok {
			return goahttp.ErrInvalidType("Post", "reference", "*post.Post", v)
		}
		body := NewReferenceRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Post", "reference", err)
		}
		return nil
	}
}

// DecodeReferenceResponse returns a decoder for responses returned by the Post
// reference endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeReferenceResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Post", "reference", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "Post" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		postID string
	)
	{
		p, ok := v.(*post.DeletePostPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Post", "delete", "*post.DeletePostPayload", v)
		}
		postID = p.PostID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeletePostPath(postID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Post", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRequest returns an encoder for requests sent to the Post delete
// server.
func EncodeDeleteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*post.DeletePostPayload)
		if !ok {
			return goahttp.ErrInvalidType("Post", "delete", "*post.DeletePostPayload", v)
		}
		req.Header.Set("Authorization", p.Token)
		return nil
	}
}

// DecodeDeleteResponse returns a decoder for responses returned by the Post
// delete endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Post", "delete", resp.StatusCode, string(body))
		}
	}
}
