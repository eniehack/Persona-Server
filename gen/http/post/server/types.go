// Code generated by goa v3.0.2, DO NOT EDIT.
//
// Post HTTP server types
//
// Command:
// $ goa gen github.com/eniehack/persona-server/design

package server

import (
	"unicode/utf8"

	post "github.com/eniehack/persona-server/gen/post"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "Post" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	Body *string `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
}

// ReferenceRequestBody is the type of the "Post" service "reference" endpoint
// HTTP request body.
type ReferenceRequestBody struct {
	// 投稿日時
	PostedAt *string `form:"posted_at,omitempty" json:"posted_at,omitempty" xml:"posted_at,omitempty"`
	// User ID
	UserID     *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	ScreenName *string `form:"screen_name,omitempty" json:"screen_name,omitempty" xml:"screen_name,omitempty"`
	// 投稿内容
	Body *string `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
}

// NewCreateNewPostPayload builds a Post service create endpoint payload.
func NewCreateNewPostPayload(body *CreateRequestBody, token string) *post.NewPostPayload {
	v := &post.NewPostPayload{
		Body: *body.Body,
	}
	v.Token = token
	return v
}

// NewReferencePost builds a Post service reference endpoint payload.
func NewReferencePost(body *ReferenceRequestBody, postID string) *post.Post {
	v := &post.Post{
		PostedAt:   *body.PostedAt,
		UserID:     *body.UserID,
		ScreenName: *body.ScreenName,
		Body:       *body.Body,
	}
	v.PostID = postID
	return v
}

// NewDeletePostPayload builds a Post service delete endpoint payload.
func NewDeletePostPayload(postID string, token string) *post.DeletePostPayload {
	return &post.DeletePostPayload{
		PostID: postID,
		Token:  token,
	}
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Body == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("body", "body"))
	}
	return
}

// ValidateReferenceRequestBody runs the validations defined on
// ReferenceRequestBody
func ValidateReferenceRequestBody(body *ReferenceRequestBody) (err error) {
	if body.PostedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("posted_at", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.ScreenName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("screen_name", "body"))
	}
	if body.Body == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("body", "body"))
	}
	if body.PostedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.posted_at", *body.PostedAt, goa.FormatDateTime))
	}
	if body.UserID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.user_id", *body.UserID, "[^a-zA-Z0-9_]+"))
	}
	if body.UserID != nil {
		if utf8.RuneCountInString(*body.UserID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_id", *body.UserID, utf8.RuneCountInString(*body.UserID), 1, true))
		}
	}
	if body.UserID != nil {
		if utf8.RuneCountInString(*body.UserID) > 15 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_id", *body.UserID, utf8.RuneCountInString(*body.UserID), 15, false))
		}
	}
	if body.ScreenName != nil {
		if utf8.RuneCountInString(*body.ScreenName) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.screen_name", *body.ScreenName, utf8.RuneCountInString(*body.ScreenName), 20, false))
		}
	}
	return
}
