// Code generated by goa v3.0.2, DO NOT EDIT.
//
// Authorization HTTP client CLI support package
//
// Command:
// $ goa gen github.com/eniehack/persona-server/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	authorization "github.com/eniehack/persona-server/gen/authorization"
	goa "goa.design/goa/v3/pkg"
)

// BuildLoginPayload builds the payload for the Authorization login endpoint
// from CLI flags.
func BuildLoginPayload(authorizationLoginBody string) (*authorization.LoginPayload, error) {
	var err error
	var body LoginRequestBody
	{
		err = json.Unmarshal([]byte(authorizationLoginBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"password\": \"testpassword\",\n      \"userid\": \"hogehoge\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.userid", body.Userid, "[^a-zA-Z0-9_]+"))
		if utf8.RuneCountInString(body.Userid) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.userid", body.Userid, utf8.RuneCountInString(body.Userid), 1, true))
		}
		if utf8.RuneCountInString(body.Userid) > 15 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.userid", body.Userid, utf8.RuneCountInString(body.Userid), 15, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &authorization.LoginPayload{
		Userid:   body.Userid,
		Password: body.Password,
	}
	return v, nil
}

// BuildRegisterPayload builds the payload for the Authorization register
// endpoint from CLI flags.
func BuildRegisterPayload(authorizationRegisterBody string) (*authorization.NewAccountPayload, error) {
	var err error
	var body RegisterRequestBody
	{
		err = json.Unmarshal([]byte(authorizationRegisterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"password\": \"testpassword\",\n      \"screen_name\": \"ほげほげ\",\n      \"userid\": \"hogehoge\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.userid", body.Userid, "[^a-zA-Z0-9_]+"))
		if utf8.RuneCountInString(body.Userid) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.userid", body.Userid, utf8.RuneCountInString(body.Userid), 1, true))
		}
		if utf8.RuneCountInString(body.Userid) > 15 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.userid", body.Userid, utf8.RuneCountInString(body.Userid), 15, false))
		}
		if utf8.RuneCountInString(body.ScreenName) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.screen_name", body.ScreenName, utf8.RuneCountInString(body.ScreenName), 20, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &authorization.NewAccountPayload{
		Userid:     body.Userid,
		ScreenName: body.ScreenName,
		Password:   body.Password,
	}
	return v, nil
}
