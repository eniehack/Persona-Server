// Code generated by goa v3.0.2, DO NOT EDIT.
//
// persona HTTP client CLI support package
//
// Command:
// $ goa gen github.com/eniehack/persona-server/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	authorizationc "github.com/eniehack/persona-server/gen/http/authorization/client"
	postc "github.com/eniehack/persona-server/gen/http/post/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `authorization (login|register)
post (create|reference|delete)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` authorization login --body '{
      "password": "testpassword",
      "userid": "hogehoge"
   }'` + "\n" +
		os.Args[0] + ` post create --body '{
      "body": "Et id qui."
   }' --token "Eius blanditiis et ex cupiditate et."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		authorizationFlags = flag.NewFlagSet("authorization", flag.ContinueOnError)

		authorizationLoginFlags    = flag.NewFlagSet("login", flag.ExitOnError)
		authorizationLoginBodyFlag = authorizationLoginFlags.String("body", "REQUIRED", "")

		authorizationRegisterFlags    = flag.NewFlagSet("register", flag.ExitOnError)
		authorizationRegisterBodyFlag = authorizationRegisterFlags.String("body", "REQUIRED", "")

		postFlags = flag.NewFlagSet("post", flag.ContinueOnError)

		postCreateFlags     = flag.NewFlagSet("create", flag.ExitOnError)
		postCreateBodyFlag  = postCreateFlags.String("body", "REQUIRED", "")
		postCreateTokenFlag = postCreateFlags.String("token", "REQUIRED", "")

		postReferenceFlags      = flag.NewFlagSet("reference", flag.ExitOnError)
		postReferenceBodyFlag   = postReferenceFlags.String("body", "REQUIRED", "")
		postReferencePostIDFlag = postReferenceFlags.String("postid", "REQUIRED", "投稿固有のID")

		postDeleteFlags      = flag.NewFlagSet("delete", flag.ExitOnError)
		postDeletePostIDFlag = postDeleteFlags.String("postid", "REQUIRED", "投稿固有のID")
		postDeleteTokenFlag  = postDeleteFlags.String("token", "REQUIRED", "")
	)
	authorizationFlags.Usage = authorizationUsage
	authorizationLoginFlags.Usage = authorizationLoginUsage
	authorizationRegisterFlags.Usage = authorizationRegisterUsage

	postFlags.Usage = postUsage
	postCreateFlags.Usage = postCreateUsage
	postReferenceFlags.Usage = postReferenceUsage
	postDeleteFlags.Usage = postDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "authorization":
			svcf = authorizationFlags
		case "post":
			svcf = postFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "authorization":
			switch epn {
			case "login":
				epf = authorizationLoginFlags

			case "register":
				epf = authorizationRegisterFlags

			}

		case "post":
			switch epn {
			case "create":
				epf = postCreateFlags

			case "reference":
				epf = postReferenceFlags

			case "delete":
				epf = postDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "authorization":
			c := authorizationc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "login":
				endpoint = c.Login()
				data, err = authorizationc.BuildLoginPayload(*authorizationLoginBodyFlag)
			case "register":
				endpoint = c.Register()
				data, err = authorizationc.BuildRegisterPayload(*authorizationRegisterBodyFlag)
			}
		case "post":
			c := postc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = postc.BuildCreatePayload(*postCreateBodyFlag, *postCreateTokenFlag)
			case "reference":
				endpoint = c.Reference()
				data, err = postc.BuildReferencePayload(*postReferenceBodyFlag, *postReferencePostIDFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = postc.BuildDeletePayload(*postDeletePostIDFlag, *postDeleteTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// authorizationUsage displays the usage of the authorization command and its
// subcommands.
func authorizationUsage() {
	fmt.Fprintf(os.Stderr, `Service is the Authorization service interface.
Usage:
    %s [globalflags] authorization COMMAND [flags]

COMMAND:
    login: ログイン
    register: 新規登録

Additional help:
    %s authorization COMMAND --help
`, os.Args[0], os.Args[0])
}
func authorizationLoginUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] authorization login -body JSON

ログイン
    -body JSON: 

Example:
    `+os.Args[0]+` authorization login --body '{
      "password": "testpassword",
      "userid": "hogehoge"
   }'
`, os.Args[0])
}

func authorizationRegisterUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] authorization register -body JSON

新規登録
    -body JSON: 

Example:
    `+os.Args[0]+` authorization register --body '{
      "password": "testpassword",
      "screen_name": "ほげほげ",
      "userid": "hogehoge"
   }'
`, os.Args[0])
}

// postUsage displays the usage of the post command and its subcommands.
func postUsage() {
	fmt.Fprintf(os.Stderr, `Service is the Post service interface.
Usage:
    %s [globalflags] post COMMAND [flags]

COMMAND:
    create: 新規投稿
    reference: 投稿の参照
    delete: 投稿の削除

Additional help:
    %s post COMMAND --help
`, os.Args[0], os.Args[0])
}
func postCreateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] post create -body JSON -token STRING

新規投稿
    -body JSON: 
    -token STRING: 

Example:
    `+os.Args[0]+` post create --body '{
      "body": "Et id qui."
   }' --token "Eius blanditiis et ex cupiditate et."
`, os.Args[0])
}

func postReferenceUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] post reference -body JSON -postid STRING

投稿の参照
    -body JSON: 
    -postid STRING: 投稿固有のID

Example:
    `+os.Args[0]+` post reference --body '{
      "body": "にゃーん",
      "posted_at": "1993-10-29T23:49:50Z",
      "screen_name": "ほげほげ",
      "user_id": "hogehoge"
   }' --postid "B7HH0YHHIRBK6ERKFU1BO82HD4"
`, os.Args[0])
}

func postDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] post delete -postid STRING -token STRING

投稿の削除
    -postid STRING: 投稿固有のID
    -token STRING: 

Example:
    `+os.Args[0]+` post delete --postid "2S0RF570553B54B5FAU9656PR0" --token "In quia et."
`, os.Args[0])
}
