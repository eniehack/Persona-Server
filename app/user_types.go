// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Simple-SNS": Application User Types
//
// Command:
// $ goagen
// --design=github.com/eniehack/simple-sns-go/design
// --out=D:\project\simple-sns-go
// --version=v1.3.1

package app

import (
	"github.com/goadesign/goa"
	"unicode/utf8"
)

// loginPayload user type.
type loginPayload struct {
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	Userid   *string `form:"userid,omitempty" json:"userid,omitempty" yaml:"userid,omitempty" xml:"userid,omitempty"`
}

// Validate validates the loginPayload type instance.
func (ut *loginPayload) Validate() (err error) {
	if ut.Userid != nil {
		if utf8.RuneCountInString(*ut.Userid) > 15 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.userid`, *ut.Userid, utf8.RuneCountInString(*ut.Userid), 15, false))
		}
	}
	return
}

// Publicize creates LoginPayload from loginPayload
func (ut *loginPayload) Publicize() *LoginPayload {
	var pub LoginPayload
	if ut.Password != nil {
		pub.Password = ut.Password
	}
	if ut.Userid != nil {
		pub.Userid = ut.Userid
	}
	return &pub
}

// LoginPayload user type.
type LoginPayload struct {
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	Userid   *string `form:"userid,omitempty" json:"userid,omitempty" yaml:"userid,omitempty" xml:"userid,omitempty"`
}

// Validate validates the LoginPayload type instance.
func (ut *LoginPayload) Validate() (err error) {
	if ut.Userid != nil {
		if utf8.RuneCountInString(*ut.Userid) > 15 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.userid`, *ut.Userid, utf8.RuneCountInString(*ut.Userid), 15, false))
		}
	}
	return
}

// newAccountPayload user type.
type newAccountPayload struct {
	Password   *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	ScreenName *string `form:"screen_name,omitempty" json:"screen_name,omitempty" yaml:"screen_name,omitempty" xml:"screen_name,omitempty"`
	Userid     *string `form:"userid,omitempty" json:"userid,omitempty" yaml:"userid,omitempty" xml:"userid,omitempty"`
}

// Validate validates the newAccountPayload type instance.
func (ut *newAccountPayload) Validate() (err error) {
	if ut.ScreenName != nil {
		if utf8.RuneCountInString(*ut.ScreenName) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.screen_name`, *ut.ScreenName, utf8.RuneCountInString(*ut.ScreenName), 20, false))
		}
	}
	if ut.Userid != nil {
		if utf8.RuneCountInString(*ut.Userid) > 15 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.userid`, *ut.Userid, utf8.RuneCountInString(*ut.Userid), 15, false))
		}
	}
	return
}

// Publicize creates NewAccountPayload from newAccountPayload
func (ut *newAccountPayload) Publicize() *NewAccountPayload {
	var pub NewAccountPayload
	if ut.Password != nil {
		pub.Password = ut.Password
	}
	if ut.ScreenName != nil {
		pub.ScreenName = ut.ScreenName
	}
	if ut.Userid != nil {
		pub.Userid = ut.Userid
	}
	return &pub
}

// NewAccountPayload user type.
type NewAccountPayload struct {
	Password   *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	ScreenName *string `form:"screen_name,omitempty" json:"screen_name,omitempty" yaml:"screen_name,omitempty" xml:"screen_name,omitempty"`
	Userid     *string `form:"userid,omitempty" json:"userid,omitempty" yaml:"userid,omitempty" xml:"userid,omitempty"`
}

// Validate validates the NewAccountPayload type instance.
func (ut *NewAccountPayload) Validate() (err error) {
	if ut.ScreenName != nil {
		if utf8.RuneCountInString(*ut.ScreenName) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.screen_name`, *ut.ScreenName, utf8.RuneCountInString(*ut.ScreenName), 20, false))
		}
	}
	if ut.Userid != nil {
		if utf8.RuneCountInString(*ut.Userid) > 15 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.userid`, *ut.Userid, utf8.RuneCountInString(*ut.Userid), 15, false))
		}
	}
	return
}

// newPostPayload user type.
type newPostPayload struct {
	Body *string `form:"body,omitempty" json:"body,omitempty" yaml:"body,omitempty" xml:"body,omitempty"`
}

// Validate validates the newPostPayload type instance.
func (ut *newPostPayload) Validate() (err error) {
	if ut.Body != nil {
		if utf8.RuneCountInString(*ut.Body) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.body`, *ut.Body, utf8.RuneCountInString(*ut.Body), 500, false))
		}
	}
	return
}

// Publicize creates NewPostPayload from newPostPayload
func (ut *newPostPayload) Publicize() *NewPostPayload {
	var pub NewPostPayload
	if ut.Body != nil {
		pub.Body = ut.Body
	}
	return &pub
}

// NewPostPayload user type.
type NewPostPayload struct {
	Body *string `form:"body,omitempty" json:"body,omitempty" yaml:"body,omitempty" xml:"body,omitempty"`
}

// Validate validates the NewPostPayload type instance.
func (ut *NewPostPayload) Validate() (err error) {
	if ut.Body != nil {
		if utf8.RuneCountInString(*ut.Body) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.body`, *ut.Body, utf8.RuneCountInString(*ut.Body), 500, false))
		}
	}
	return
}
